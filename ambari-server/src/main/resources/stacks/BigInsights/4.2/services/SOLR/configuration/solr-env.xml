<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_do_not_extend="true">
   <property>
    <name>solr_user</name>
    <description>User to run Solr as</description>
    <on-ambari-upgrade add="true"/>
    <property-type>USER</property-type>
    <value>solr</value>
    <value-attributes>
      <type>user</type>
      <overridable>false</overridable>
    </value-attributes>
  </property>
  
  <property>
    <name>solr_data_dir</name>
    <value>/opt/solr/data</value>
    <description>Solr Home Directory for writable Solr files and index data</description>
    <on-ambari-upgrade add="true"/>
  </property>

  <property>
    <name>solr_pid_dir</name>
    <value>/var/run/solr</value>
    <on-ambari-upgrade add="true"/>
  </property>

  <property>
    <name>solr_log_dir</name>
    <value>/var/log/solr</value>
    <on-ambari-upgrade add="true"/>
  </property>

  <property>
    <name>solr_port</name>
    <value>8983</value>
    <description>Sets the port Solr binds to, default is 8983</description>
    <on-ambari-upgrade add="true"/>
  </property>

  <property>
    <name>solr_hdfs_home_dir</name>
    <value>/apps/solr/data</value>
    <description>A root location in HDFS for Solr to write collection data to. Rather than specifying an HDFS location for the data directory or update log directory, use this to specify one root location and have everything automatically created within this HDFS</description>
    <on-ambari-upgrade add="true"/>
  </property>

  
  <property>
    <name>ZOOKEEPER_CHROOT</name>
    <value>/solr</value>
    <description>If you're using a ZooKeeper instance that is shared by other systems, it's recommended to isolate the SolrCloud znode tree using ZooKeeper's chroot support. 
    For instance, to ensure all znodes created by SolrCloud are stored under /solr, you can put /solr on the end of your ZK_HOST connection string, such as: ZK_HOST=zk1,zk2,zk3/solr</description>
    <on-ambari-upgrade add="true"/>
  </property>

  <property>
      <name>solr_xms_minmem</name>
      <value>512</value>
      <description>Set Xms value for Solr in MB</description>
      <on-ambari-upgrade add="true"/>
      <value-attributes>
          <type>int</type>
          <minimum>0</minimum>
          <maximum>268435456</maximum>
          <unit>MB</unit>
          <increment-step>1</increment-step>
      </value-attributes>
  </property>

  <property>
      <name>solr_xmx_maxmem</name>
      <value>512</value>
      <description>Set Xmx value for Solr in MB</description>
      <on-ambari-upgrade add="true"/>
      <value-attributes>
          <type>int</type>
          <minimum>{{solr_xms_minmem}}</minimum>
          <maximum>268435456</maximum>
          <unit>MB</unit>
          <increment-step>1</increment-step>
      </value-attributes>
  </property>

 <property>
    <name>content</name>
    <description>This is the jinja template for solr.in.sh file</description>
    <value>

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


export JAVA_HOME={{java64_home}}

# By default the script will use JAVA_HOME to determine which java
# to use, but you can set a specific path for Solr to use without
# affecting other Java applications on your server/workstation.
#SOLR_JAVA_HOME=""



# Increase Java Min/Max Heap as needed to support your indexing / query needs
SOLR_JAVA_MEM="-Xms{{solr_xms_minmem}}m -Xmx{{solr_xmx_maxmem}}m"

# Enable verbose GC logging
GC_LOG_OPTS="-verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails \
-XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime"


# These GC settings have shown to work well for a number of common Solr workloads
GC_TUNE="-XX:NewRatio=3 \
-XX:SurvivorRatio=4 \
-XX:TargetSurvivorRatio=90 \
-XX:MaxTenuringThreshold=8 \
-XX:+UseConcMarkSweepGC \
-XX:+UseParNewGC \
-XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 \
-XX:+CMSScavengeBeforeRemark \
-XX:PretenureSizeThreshold=64m \
-XX:+UseCMSInitiatingOccupancyOnly \
-XX:CMSInitiatingOccupancyFraction=50 \
-XX:CMSMaxAbortablePrecleanTime=6000 \
-XX:+CMSParallelRemarkEnabled \
-XX:+ParallelRefProcEnabled \
-XX:MaxDirectMemorySize=20g"


# Set the ZooKeeper connection string if using an external ZooKeeper ensemble
# e.g. host1:2181,host2:2181/chroot
# Leave empty if not using SolrCloud
#ZK_HOST=""



# Set the ZooKeeper client timeout (for SolrCloud mode)
#ZK_CLIENT_TIMEOUT="15000"


# By default the start script uses "localhost"; override the hostname here
# for production SolrCloud environments to control the hostname exposed to cluster state
#SOLR_HOST="192.168.1.1"

# By default the start script uses UTC; override the timezone if needed
#SOLR_TIMEZONE="UTC"

# Set to true to activate the JMX RMI connector to allow remote JMX client applications
# to monitor the JVM hosting Solr; set to "false" to disable that behavior
# (false is recommended in production environments)
ENABLE_REMOTE_JMX_OPTS="false"


# The script will use SOLR_PORT+10000 for the RMI_PORT or you can set it here
# RMI_PORT=18983


# Anything you add to the SOLR_OPTS variable will be included in the java
# start command line as-is, in ADDITION to other options. If you specify the
# -a option on start script, those options will be appended as well. Examples:
#SOLR_OPTS="$SOLR_OPTS -Dsolr.autoSoftCommit.maxTime=3000"
#SOLR_OPTS="$SOLR_OPTS -Dsolr.autoCommit.maxTime=60000"
#SOLR_OPTS="$SOLR_OPTS -Dsolr.clustering.enabled=true"



# Location where the bin/solr script will save PID files for running instances
# If not set, the script will create PID files in $SOLR_TIP/bin
#SOLR_PID_DIR=



# Path to a directory where Solr creates index files, the specified directory
# must contain a solr.xml; by default, Solr will use server/solr
#SOLR_HOME=



# Solr provides a default Log4J configuration properties file in server/resources
# however, you may want to customize the log settings and file appender location
# so you can point the script to use a different log4j.properties file
#LOG4J_PROPS=/var/solr/log4j.properties



# Location where Solr should write logs to; should agree with the file appender
# settings in server/resources/log4j.properties
#SOLR_LOGS_DIR=



# Sets the port Solr binds to, default is 8983
#SOLR_PORT=8983



# Uncomment to set SSL-related system properties
# Be sure to update the paths to the correct keystore for your environment
#SOLR_SSL_OPTS="-Djavax.net.ssl.keyStore=etc/solr-ssl.keystore.jks \
#-Djavax.net.ssl.keyStorePassword=secret \
#-Djavax.net.ssl.trustStore=etc/solr-ssl.keystore.jks \
#-Djavax.net.ssl.trustStorePassword=secret"



# Uncomment to set a specific SSL port (-Djetty.ssl.port=N); if not set
# and you are using SSL, then the start script will use SOLR_PORT for the SSL port
#SOLR_SSL_PORT=


SOLR_PID_DIR={{pid_dir}}
SOLR_HOME={{solr_data_dir}}
LOG4J_PROPS={{solr_conf_dir}}/log4j.properties
SOLR_LOGS_DIR={{log_dir}}
SOLR_PORT={{solr_port}}
SOLR_MODE=solrcloud
ZK_HOST={{zookeeper_hosts_list}}{{zookeeper_chroot}}
SOLR_HOST={{hostname}}

# Comment out the following SOLR_OPTS setting to config Solr to write its index and transaction log files to local filesystem. 
# Data (index and transaction log files) exists on HDFS will not be moved to local filesystem, 
# after you change this config, they will not be available from local filesystem.
SOLR_OPTS="-Dsolr.directoryFactory=HdfsDirectoryFactory \
-Dsolr.lock.type=hdfs \
-Dsolr.hdfs.confdir=/etc/hadoop/conf \
-Dsolr.hdfs.home={{fs_root}}{{solr_hdfs_home_dir}} \
-Dsolr.hdfs.security.kerberos.enabled={{sole_kerberos_enabled}} \
-Dsolr.hdfs.security.kerberos.keytabfile={{solr_keytab}} \
-Dsolr.hdfs.security.kerberos.principal={{solr_principal}} \
-Dsolr.log4j.dir={{log_dir}}"

    </value>
    <on-ambari-upgrade add="true"/>
  </property>  
  
</configuration>
